DECLARE @SourceSchema NVARCHAR(128) = 'SOURCE';
DECLARE @TargetSchema NVARCHAR(128) = 'TEST';
DECLARE @SQL NVARCHAR(MAX);

DECLARE TableCursor CURSOR FOR
SELECT TABLE_NAME
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = @SourceSchema AND TABLE_TYPE = 'BASE TABLE';

OPEN TableCursor;

DECLARE @TableName NVARCHAR(128);

FETCH NEXT FROM TableCursor INTO @TableName;

WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT 'Processing Table: ' + @TableName;

    -- Fetch column names for both source and target tables
    DECLARE @Columns NVARCHAR(MAX);
    SELECT @Columns = STRING_AGG(QUOTENAME(COLUMN_NAME), ', ')
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = @SourceSchema AND TABLE_NAME = @TableName;

        -- Generate DELETE statement
    SET @SQL = '
    DELETE FROM ' + QUOTENAME(@TargetSchema) + '.' + QUOTENAME(@TableName) + ';';
    PRINT @SQL; -- Debugging: View the DELETE SQL
    EXEC sp_executesql @SQL;

    -- Check if the table has an IDENTITY column
    IF EXISTS (
        SELECT 1
        FROM sys.columns c
        JOIN sys.objects o ON c.object_id = o.object_id
        WHERE o.name = @TableName
        AND o.schema_id = SCHEMA_ID(@SourceSchema)
        AND c.is_identity = 1
    )
    BEGIN
        -- Generate INSERT statement with IDENTITY_INSERT
        SET @SQL = '
        SET IDENTITY_INSERT ' + QUOTENAME(@TargetSchema) + '.' + QUOTENAME(@TableName) + ' ON;
        INSERT INTO ' + QUOTENAME(@TargetSchema) + '.' + QUOTENAME(@TableName) + ' (' + @Columns + ')
        SELECT ' + @Columns + ' FROM ' + QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@TableName) + ';
        SET IDENTITY_INSERT ' + QUOTENAME(@TargetSchema) + '.' + QUOTENAME(@TableName) + ' OFF;';
    END
    ELSE
    BEGIN
        -- Generate INSERT statement without IDENTITY_INSERT
        SET @SQL = '
        INSERT INTO ' + QUOTENAME(@TargetSchema) + '.' + QUOTENAME(@TableName) + ' (' + @Columns + ')
        SELECT ' + @Columns + ' FROM ' + QUOTENAME(@SourceSchema) + '.' + QUOTENAME(@TableName) + ';';
    END

    PRINT @SQL; -- Debugging: View the generated SQL
    EXEC sp_executesql @SQL;

    FETCH NEXT FROM TableCursor INTO @TableName;
END;

CLOSE TableCursor;
DEALLOCATE TableCursor;
